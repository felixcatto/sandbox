/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_final_form__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_final_form_arrays__ = __webpack_require__(3);\n// import 'bootstrap/dist/css/bootstrap.min.css';\n// import { createForm } from 'final-form';\n// import arrayMutators from 'final-form-arrays';\n\n// const onSubmit = values => {\n//   console.log(JSON.stringify(values, 0, 2));\n// };\n// const composeValidators = (...validators) => value =>\n//   validators.reduce((error, validator) => error || validator(value), undefined);\n// const required = value => value === '' ? 'Required' : undefined;\n// const mustBeVasa = value => value !== 'vasa' ? 'Name must be vasa' : undefined;\n// const valid = value => undefined;\n\n// const initialState = {};\n// initialState.advanced = {};\n// const finalForm = createForm({\n//   onSubmit,\n//   mutators: { ...arrayMutators },\n//   initialValues: {\n//     name: 'vasa',\n//     class: '',\n//     advanced: {\n//       lvl: '322',\n//     },\n//     customers: [],\n//   },\n//   // validate: (values) => {\n//   //   console.log(values);\n//   //   const errors = {};\n//   //   if (values.name !== 'vasa') {\n//   //     errors.name = 'Name must be vasa';\n//   //   }\n//   //   if (values.class !== 'ninja') {\n//   //     errors.class = 'Class must be ninja';\n//   //   }\n//   //   return errors;\n//   // },\n// });\n\n\n// finalForm.subscribe(\n//   (formState) => {\n//     // console.log('updateForm');\n//     initialState.formState = formState;\n//   },\n//   {\n//     values: true,\n//     errors: true,\n//     valid: true,\n//   },\n// );\n\n// const fields = [\n//   {\n//     fieldName: 'name',\n//     getValidator: () => composeValidators(required, mustBeVasa),\n//   }, {\n//     fieldName: 'class',\n//     getValidator: () => required,\n//   },\n// ];\n\n// fields.forEach(({ fieldName, getValidator }) => {\n//   finalForm.registerField(\n//     fieldName,\n//     fieldState => {\n//       // console.log(`updateField ${fieldName}`);\n//       // console.log(fieldState);\n//       initialState[fieldName] = fieldState;\n//     }, {\n//       value: true,\n//       touched: true,\n//       valid: true,\n//       error: true,\n//     }, {\n//       getValidator,\n//       // getValidator: () => (value) => {\n//       //   console.log(value);\n//       //   if (fieldName === 'name' && value !== 'vasa') {\n//       //     return 'Name must be vasa';\n//       //   }\n//       // },\n//     },\n//   );\n// });\n\n// finalForm.registerField(\n//   'advanced.lvl',\n//   (fieldState) => {\n//     // console.log(fieldState);\n//     // вот тут возможно требуется некоторая магия по авто созданию обьектов 'advanced'\n//     initialState.advanced.lvl = fieldState;\n//   }, {\n//     value: true,\n//     touched: true,\n//     valid: true,\n//     error: true,\n//   }, {\n//     getValidator: () => (value) => (value !== '322' ? 'Value must be 322' : undefined),\n//   }\n// );\n\n// finalForm.registerField(\n//   'customers',\n//   (fieldState) => {\n//     console.log(fieldState);\n//     initialState.customers = fieldState;\n//   }, {\n//     value: true,\n//     touched: true,\n//     valid: true,\n//     error: true,\n//   }, {\n//     getValidator: () => (value) => {\n//       console.log(value);\n//     },\n//   }\n// );\n// finalForm.registerField(\n//   'customers.firstName',\n//   (fieldState) => {\n//     console.log(fieldState);\n//     initialState.customers = fieldState;\n//   }, {\n//     value: true,\n//     touched: true,\n//     valid: true,\n//     error: true,\n//   }, {\n//     getValidator: () => (value) => {\n//       console.log(value);\n//     },\n//   }\n// );\n// // finalForm.mutators.push('customers', { firstName: '', lastName: '' });\n// // finalForm.mutators.push('customers', undefined);\n\n\n// const formEl = document.querySelector('.js-form');\n// const nameEl = document.querySelector('.js-name');\n// const classEl = document.querySelector('.js-class');\n// const lvlEl = document.querySelector('.js-lvl');\n// const firstNameEl = document.querySelector('.js-firstname');\n// nameEl.value = initialState.name.value;\n// classEl.value = initialState.class.value;\n// lvlEl.value = initialState.advanced.lvl.value;\n\n// formEl.addEventListener('submit', (e) => {\n//   event.preventDefault();\n//   finalForm.submit();\n//   console.log(initialState.formState.errors);\n// });\n// nameEl.addEventListener('change', e => initialState.name.change(e.target.value));\n// nameEl.addEventListener('blur', () => initialState.name.blur());\n// nameEl.addEventListener('focus', () => initialState.name.focus());\n// classEl.addEventListener('change', e => initialState.class.change(e.target.value));\n// classEl.addEventListener('blur', () => initialState.class.blur());\n// classEl.addEventListener('focus', () => initialState.class.focus());\n// lvlEl.addEventListener('change', e => initialState.advanced.lvl.change(e.target.value));\n// lvlEl.addEventListener('blur', () => initialState.advanced.lvl.blur());\n// lvlEl.addEventListener('focus', () => initialState.advanced.lvl.focus());\n\n\n// firstNameEl.addEventListener('change', e => initialState.customers.firstName.change(e.target.value));\n// firstNameEl.addEventListener('blur', () => initialState.customers.firstName.blur());\n// firstNameEl.addEventListener('focus', () => initialState.customers.firstName.focus());\n\n\n// window.finalForm = finalForm;\n// window.initialState = initialState;\n\n\n// import 'bootstrap/dist/css/bootstrap.min.css';\n\n\nwindow.bundle = {\n  createForm: __WEBPACK_IMPORTED_MODULE_0_final_form__[\"a\" /* createForm */],\n  arrayMutators: __WEBPACK_IMPORTED_MODULE_1_final_form_arrays__[\"a\" /* default */]\n};\n// const initialState = {};\n// const finalForm = createForm({\n//   onSubmit: values => console.log(JSON.stringify(values, 0, 2)),\n//   mutators: { ...arrayMutators },\n//   initialValues: {\n//     name: 'John',\n//     customers: [],\n//   },\n// });\n\n// finalForm.registerField(\n//   'name',\n//   fieldState => {\n//     initialState.name = fieldState;\n//   }, {}, {\n//     getValidator: () => value => (value === '' ? 'Required' : undefined),\n//   },\n// );\n\n// finalForm.registerField(\n//   'customers',\n//   (fieldState) => {\n//     initialState.customers = fieldState;\n//   }, {}, {\n//     getValidator: () => (value) => {\n//       console.log(value);\n//     },\n//   }\n// );\n\n// finalForm.registerField(\n//   'customers.megaplan',\n//   (fieldState) => {\n//     initialState.megaplan = fieldState;\n//   }, {}, {\n//     getValidator: () => (value) => {\n//       console.log(value);\n//     },\n//   }\n// );\n\n// // // finalForm.mutators.push('customers', { firstName: '', lastName: '' });\n// finalForm.mutators.push('customers', { megaplan: '' });\n\n\n// const formEl = document.querySelector('.js-form');\n// const nameEl = document.querySelector('.js-name');\n// const firstNameEl = document.querySelector('.js-firstname');\n\n// formEl.addEventListener('submit', (e) => {\n//   event.preventDefault();\n//   finalForm.submit();\n// });\n// nameEl.addEventListener('change', e => initialState.name.change(e.target.value));\n// nameEl.addEventListener('blur', () => initialState.name.blur());\n// nameEl.addEventListener('focus', () => initialState.name.focus());\n// firstNameEl.addEventListener('change', e => initialState.customers.change(e.target.value));\n// firstNameEl.addEventListener('blur', () => initialState.customers.blur());\n// firstNameEl.addEventListener('focus', () => initialState.customers.focus());//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n");

/***/ }),
/* 1 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(process) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return createForm; });\n/* unused harmony export FORM_ERROR */\n/* unused harmony export version */\n/* unused harmony export formSubscriptionItems */\n/* unused harmony export fieldSubscriptionItems */\n/* unused harmony export getIn */\n/* unused harmony export setIn */\n//      \nvar toPath = function toPath(key) {\n  if (key === null || key === undefined) {\n    return [];\n  }\n  if (typeof key !== 'string') {\n    throw new Error('toPath() expects a string');\n  }\n  return key.length ? key.split(/[.[\\]]+/).filter(Boolean) : [];\n};\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar defineProperty = function (obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n};\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar toConsumableArray = function (arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n};\n\n//      \nvar getIn = function getIn(state, complexKey) {\n  // Intentionally using iteration rather than recursion\n  var path = toPath(complexKey);\n  var current = state;\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = path[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var key = _step.value;\n\n      if (current === undefined || current === null || (typeof current === 'undefined' ? 'undefined' : _typeof(current)) !== 'object' || Array.isArray(current) && isNaN(key)) {\n        return undefined;\n      }\n      current = current[key];\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return current;\n};\n\n//      \nvar setInRecursor = function setInRecursor(current, index, path, value) {\n  if (index >= path.length) {\n    // end of recursion\n    return value;\n  }\n  var key = path[index];\n\n  // determine type of key\n  if (isNaN(key)) {\n    // object set\n    if (current === undefined || current === null) {\n      // recurse\n      var _result2 = setInRecursor(undefined, index + 1, path, value);\n\n      // delete or create an object\n      return _result2 === undefined ? undefined : defineProperty({}, key, _result2);\n    }\n    if (Array.isArray(current)) {\n      throw new Error('Cannot set a non-numeric property on an array');\n    }\n    // current exists, so make a copy of all its values, and add/update the new one\n    var _result = setInRecursor(current[key], index + 1, path, value);\n    var numKeys = Object.keys(current).length;\n    if (_result === undefined) {\n      if (current[key] === undefined && numKeys === 0) {\n        // object was already empty\n        return undefined;\n      }\n      if (current[key] !== undefined && numKeys <= 1) {\n        // only key we had was the one we are deleting\n        if (!isNaN(path[index - 1])) {\n          // we are in an array, so return an empty object\n          return {};\n        } else {\n          return undefined;\n        }\n      }\n    }\n    // set result in key\n    return _extends({}, current, defineProperty({}, key, _result));\n  }\n  // array set\n  var numericKey = Number(key);\n  if (current === undefined || current === null) {\n    // recurse\n    var _result3 = setInRecursor(undefined, index + 1, path, value);\n\n    // if nothing returned, delete it\n    if (_result3 === undefined) {\n      return undefined;\n    }\n\n    // create an array\n    var _array = [];\n    _array[numericKey] = _result3;\n    return _array;\n  }\n  if (!Array.isArray(current)) {\n    throw new Error('Cannot set a numeric property on an object');\n  }\n  // recurse\n  var existingValue = current[numericKey];\n  var result = setInRecursor(existingValue, index + 1, path, value);\n\n  // current exists, so make a copy of all its values, and add/update the new one\n  var array = [].concat(toConsumableArray(current));\n  array[numericKey] = result;\n  return array;\n};\n\nvar setIn = function setIn(state, key, value) {\n  if (state === undefined || state === null) {\n    throw new Error('Cannot call setIn() with ' + String(state) + ' state');\n  }\n  if (key === undefined || key === null) {\n    throw new Error('Cannot call setIn() with ' + String(key) + ' key');\n  }\n  // Recursive function needs to accept and return State, but public API should\n  // only deal with Objects\n  return setInRecursor(state, 0, toPath(key), value);\n};\n\n//      \n\n\n/**\n * Converts internal field state to published field state\n */\nvar publishFieldState = function publishFieldState(formState, field) {\n  var errors = formState.errors,\n      initialValues = formState.initialValues,\n      lastSubmittedValues = formState.lastSubmittedValues,\n      submitErrors = formState.submitErrors,\n      submitFailed = formState.submitFailed,\n      submitSucceeded = formState.submitSucceeded,\n      values = formState.values;\n  var active = field.active,\n      blur = field.blur,\n      change = field.change,\n      data = field.data,\n      focus = field.focus,\n      name = field.name,\n      touched = field.touched,\n      visited = field.visited;\n\n  var value = getIn(values, name);\n  var error = getIn(errors, name);\n  var submitError = submitErrors && getIn(submitErrors, name);\n  var initial = initialValues && getIn(initialValues, name);\n  var pristine = field.isEqual(initial, value);\n  var dirtySinceLastSubmit = !!(lastSubmittedValues && !field.isEqual(getIn(lastSubmittedValues, name), value));\n  var valid = !error && !submitError;\n  return {\n    active: active,\n    blur: blur,\n    change: change,\n    data: data,\n    dirty: !pristine,\n    dirtySinceLastSubmit: dirtySinceLastSubmit,\n    error: error,\n    focus: focus,\n    initial: initial,\n    invalid: !valid,\n    length: Array.isArray(value) ? value.length : undefined,\n    name: name,\n    pristine: pristine,\n    submitError: submitError,\n    submitFailed: submitFailed,\n    submitSucceeded: submitSucceeded,\n    touched: touched,\n    valid: valid,\n    value: value,\n    visited: visited\n  };\n};\n\n//      \nvar fieldSubscriptionItems = ['active', 'data', 'dirty', 'dirtySinceLastSubmit', 'error', 'initial', 'invalid', 'length', 'pristine', 'submitError', 'submitFailed', 'submitSucceeded', 'touched', 'valid', 'value', 'visited'];\n\n//      \n\n\nvar shallowEqual = function shallowEqual(a, b) {\n  if (a === b) {\n    return true;\n  }\n  if ((typeof a === 'undefined' ? 'undefined' : _typeof(a)) !== 'object' || !a || (typeof b === 'undefined' ? 'undefined' : _typeof(b)) !== 'object' || !b) {\n    return false;\n  }\n  var keysA = Object.keys(a);\n  var keysB = Object.keys(b);\n  if (keysA.length !== keysB.length) {\n    return false;\n  }\n  var bHasOwnProperty = Object.prototype.hasOwnProperty.bind(b);\n  for (var idx = 0; idx < keysA.length; idx++) {\n    var key = keysA[idx];\n    if (!bHasOwnProperty(key) || a[key] !== b[key]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n//      \nfunction subscriptionFilter (dest, src, previous, subscription, keys, shallowEqualKeys) {\n  var different = false;\n  keys.forEach(function (key) {\n    if (subscription[key]) {\n      dest[key] = src[key];\n      if (!previous || (~shallowEqualKeys.indexOf(key) ? !shallowEqual(src[key], previous[key]) : src[key] !== previous[key])) {\n        different = true;\n      }\n    }\n  });\n  return different;\n}\n\n//      \nvar shallowEqualKeys = ['data'];\n\n/**\n * Filters items in a FieldState based on a FieldSubscription\n */\nvar filterFieldState = function filterFieldState(state, previousState, subscription, force) {\n  var result = {\n    blur: state.blur,\n    change: state.change,\n    focus: state.focus,\n    name: state.name\n  };\n  var different = subscriptionFilter(result, state, previousState, subscription, fieldSubscriptionItems, shallowEqualKeys) || !previousState;\n  return different || force ? result : undefined;\n};\n\n//      \nvar formSubscriptionItems = ['active', 'dirty', 'dirtySinceLastSubmit', 'error', 'errors', 'initialValues', 'invalid', 'pristine', 'submitting', 'submitError', 'submitErrors', 'submitFailed', 'submitSucceeded', 'touched', 'valid', 'validating', 'values', 'visited'];\n\n//      \nvar shallowEqualKeys$1 = ['touched', 'visited'];\n\n/**\n * Filters items in a FormState based on a FormSubscription\n */\nvar filterFormState = function filterFormState(state, previousState, subscription, force) {\n  var result = {};\n  var different = subscriptionFilter(result, state, previousState, subscription, formSubscriptionItems, shallowEqualKeys$1) || !previousState;\n  return different || force ? result : undefined;\n};\n\n//      \nvar memoize = function memoize(fn) {\n  var lastArgs = void 0;\n  var lastResult = void 0;\n  return function () {\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    if (!lastArgs || args.length !== lastArgs.length || args.some(function (arg, index) {\n      return !shallowEqual(lastArgs[index], arg);\n    })) {\n      lastArgs = args;\n      lastResult = fn.apply(undefined, args);\n    }\n    return lastResult;\n  };\n};\n\nvar isPromise = (function (obj) {\n  return !!obj && ((typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object' || typeof obj === 'function') && typeof obj.then === 'function';\n});\n\n//      \nvar FORM_ERROR = Symbol('form-error');\nvar version = '4.0.4';\n\nvar tripleEquals = function tripleEquals(a, b) {\n  return a === b;\n};\n\nvar convertToExternalFormState = function convertToExternalFormState(_ref) {\n  var active = _ref.active,\n      dirtySinceLastSubmit = _ref.dirtySinceLastSubmit,\n      error = _ref.error,\n      errors = _ref.errors,\n      initialValues = _ref.initialValues,\n      pristine = _ref.pristine,\n      submitting = _ref.submitting,\n      submitFailed = _ref.submitFailed,\n      submitSucceeded = _ref.submitSucceeded,\n      submitError = _ref.submitError,\n      submitErrors = _ref.submitErrors,\n      valid = _ref.valid,\n      validating = _ref.validating,\n      values = _ref.values;\n  return {\n    active: active,\n    dirty: !pristine,\n    dirtySinceLastSubmit: dirtySinceLastSubmit,\n    error: error,\n    errors: errors,\n    invalid: !valid,\n    initialValues: initialValues,\n    pristine: pristine,\n    submitting: submitting,\n    submitFailed: submitFailed,\n    submitSucceeded: submitSucceeded,\n    submitError: submitError,\n    submitErrors: submitErrors,\n    valid: valid,\n    validating: validating > 0,\n    values: values\n  };\n};\n\nfunction notifySubscriber(subscriber, subscription, state, lastState, filter) {\n  var force = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n\n  var notification = filter(state, lastState, subscription, force);\n  if (notification) {\n    subscriber(notification);\n  }\n}\n\nfunction notify(_ref2, state, lastState, filter) {\n  var entries = _ref2.entries;\n\n  Object.keys(entries).forEach(function (key) {\n    var _entries$Number = entries[Number(key)],\n        subscription = _entries$Number.subscription,\n        subscriber = _entries$Number.subscriber;\n\n    notifySubscriber(subscriber, subscription, state, lastState, filter);\n  });\n}\n\nvar createForm = function createForm(config) {\n  if (!config) {\n    throw new Error('No config specified');\n  }\n  var debug = config.debug,\n      initialValues = config.initialValues,\n      mutators = config.mutators,\n      onSubmit = config.onSubmit,\n      validate = config.validate,\n      validateOnBlur = config.validateOnBlur;\n\n  if (!onSubmit) {\n    throw new Error('No onSubmit function specified');\n  }\n\n  var state = {\n    subscribers: { index: 0, entries: {} },\n    fieldSubscribers: {},\n    fields: {},\n    formState: {\n      dirtySinceLastSubmit: false,\n      errors: {},\n      initialValues: initialValues && _extends({}, initialValues),\n      invalid: false,\n      pristine: true,\n      submitting: false,\n      submitFailed: false,\n      submitSucceeded: false,\n      valid: true,\n      validating: 0,\n      values: initialValues ? _extends({}, initialValues) : {}\n    },\n    lastFormState: undefined\n  };\n  var inBatch = false;\n  var changeValue = function changeValue(state, name, mutate) {\n    if (state.fields[name]) {\n      var before = getIn(state.formState.values, name);\n      var after = mutate(before);\n      state.formState.values = setIn(state.formState.values, name, after) || {};\n    }\n  };\n\n  // bind state to mutators\n  var mutatorsApi = mutators && Object.keys(mutators).reduce(function (result, key) {\n    result[key] = function () {\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      var mutatableState = {\n        formState: state.formState,\n        fields: state.fields\n      };\n      var returnValue = mutators[key](args, mutatableState, {\n        changeValue: changeValue,\n        getIn: getIn,\n        setIn: setIn,\n        shallowEqual: shallowEqual\n      });\n      state.formState = mutatableState.formState;\n      state.fields = mutatableState.fields;\n      runValidation(undefined, function () {\n        notifyFieldListeners();\n        notifyFormListeners();\n      });\n      return returnValue;\n    };\n    return result;\n  }, {}) || {};\n\n  var runRecordLevelValidation = function runRecordLevelValidation(setErrors) {\n    var promises = [];\n    if (validate) {\n      var errorsOrPromise = validate(_extends({}, state.formState.values)); // clone to avoid writing\n      if (isPromise(errorsOrPromise)) {\n        promises.push(errorsOrPromise.then(setErrors));\n      } else {\n        setErrors(errorsOrPromise);\n      }\n    }\n    return promises;\n  };\n\n  var getValidators = function getValidators(field) {\n    return Object.keys(field.validators).reduce(function (result, index) {\n      var validator = field.validators[Number(index)]();\n      if (validator) {\n        result.push(validator);\n      }\n      return result;\n    }, []);\n  };\n\n  var runFieldLevelValidation = function runFieldLevelValidation(field, setError) {\n    var promises = [];\n    var validators = getValidators(field);\n    if (validators.length) {\n      var error = void 0;\n      validators.forEach(function (validator) {\n        var errorOrPromise = validator(getIn(state.formState.values, field.name), state.formState.values);\n        if (errorOrPromise && isPromise(errorOrPromise)) {\n          promises.push(errorOrPromise.then(setError));\n        } else if (!error) {\n          // first registered validator wins\n          error = errorOrPromise;\n        }\n      });\n      setError(error);\n    }\n    return promises;\n  };\n\n  var runValidation = function runValidation(fieldChanged, callback) {\n    var fields = state.fields,\n        formState = state.formState;\n\n    var fieldKeys = Object.keys(fields);\n    if (!validate && !fieldKeys.some(function (key) {\n      return getValidators(fields[key]).length;\n    })) {\n      if (callback) {\n        callback();\n      }\n      return; // no validation rules\n    }\n\n    // pare down field keys to actually validate\n    if (fieldChanged) {\n      var validateFields = fields[fieldChanged].validateFields;\n\n      if (validateFields) {\n        fieldKeys = validateFields.length ? validateFields.concat(fieldChanged) : [fieldChanged];\n      }\n    }\n\n    var recordLevelErrors = {};\n    var fieldLevelErrors = {};\n    var promises = [].concat(toConsumableArray(runRecordLevelValidation(function (errors) {\n      recordLevelErrors = errors || {};\n    })), toConsumableArray(fieldKeys.reduce(function (result, name) {\n      return result.concat(runFieldLevelValidation(fields[name], function (error) {\n        fieldLevelErrors[name] = error;\n      }));\n    }, [])));\n\n    var processErrors = function processErrors() {\n      var merged = _extends({}, recordLevelErrors);\n      fieldKeys.forEach(function (name) {\n        if (fields[name]) {\n          // make sure field is still registered\n          // field-level errors take precedent over record-level errors\n          var error = fieldLevelErrors[name] || getIn(recordLevelErrors, name);\n          if (error) {\n            merged = setIn(merged, name, error);\n          }\n        }\n      });\n      if (!shallowEqual(formState.errors, merged)) {\n        formState.errors = merged;\n      }\n      formState.error = recordLevelErrors[FORM_ERROR];\n    };\n\n    // process sync errors\n    processErrors();\n\n    if (promises.length) {\n      // sync errors have been set. notify listeners while we wait for others\n      state.formState.validating++;\n      if (callback) {\n        callback();\n      }\n\n      Promise.all(promises).then(function () {\n        state.formState.validating--;\n        processErrors();\n        if (callback) {\n          callback();\n        }\n      });\n    } else if (callback) {\n      callback();\n    }\n  };\n\n  var notifyFieldListeners = function notifyFieldListeners(force) {\n    if (inBatch) {\n      return;\n    }\n    var fields = state.fields,\n        fieldSubscribers = state.fieldSubscribers,\n        formState = state.formState;\n\n    Object.keys(fields).forEach(function (name) {\n      var field = fields[name];\n      var fieldState = publishFieldState(formState, field);\n      var lastFieldState = field.lastFieldState;\n\n      if (!shallowEqual(fieldState, lastFieldState)) {\n        field.lastFieldState = fieldState;\n        notify(fieldSubscribers[name], fieldState, lastFieldState, filterFieldState);\n      }\n    });\n  };\n\n  var hasSyncErrors = function hasSyncErrors() {\n    return !!(state.formState.error || Object.keys(state.formState.errors).length);\n  };\n\n  var calculateNextFormState = function calculateNextFormState() {\n    var fields = state.fields,\n        formState = state.formState,\n        lastFormState = state.lastFormState;\n\n    var fieldKeys = Object.keys(fields);\n\n    // calculate dirty/pristine\n    formState.pristine = fieldKeys.every(function (key) {\n      return fields[key].isEqual(getIn(formState.values, key), getIn(formState.initialValues || {}, key));\n    });\n    formState.dirtySinceLastSubmit = !!(formState.lastSubmittedValues && !fieldKeys.every(function (key) {\n      return fields[key].isEqual(getIn(formState.values, key), getIn(formState.lastSubmittedValues || {}, key) // || {} is for flow, but causes branch coverage complaint\n      );\n    }));\n\n    formState.valid = !formState.error && !formState.submitError && !Object.keys(formState.errors).length && !(formState.submitErrors && Object.keys(formState.submitErrors).length);\n    var nextFormState = convertToExternalFormState(formState);\n\n    var _fieldKeys$reduce = fieldKeys.reduce(function (result, key) {\n      result.touched[key] = fields[key].touched;\n      result.visited[key] = fields[key].visited;\n      return result;\n    }, { touched: {}, visited: {} }),\n        touched = _fieldKeys$reduce.touched,\n        visited = _fieldKeys$reduce.visited;\n\n    nextFormState.touched = lastFormState && shallowEqual(lastFormState.touched, touched) ? lastFormState.touched : touched;\n    nextFormState.visited = lastFormState && shallowEqual(lastFormState.visited, visited) ? lastFormState.visited : visited;\n    return lastFormState && shallowEqual(lastFormState, nextFormState) ? lastFormState : nextFormState;\n  };\n\n  var callDebug = function callDebug() {\n    return debug && process.env.NODE_ENV !== 'production' && debug(convertToExternalFormState(state.formState), Object.keys(state.fields).reduce(function (result, key) {\n      result[key] = state.fields[key];\n      return result;\n    }, {}));\n  };\n\n  var notifyFormListeners = function notifyFormListeners() {\n    callDebug();\n    if (inBatch) {\n      return;\n    }\n    var lastFormState = state.lastFormState;\n\n    var nextFormState = calculateNextFormState();\n    if (nextFormState !== lastFormState) {\n      state.lastFormState = nextFormState;\n      notify(state.subscribers, nextFormState, lastFormState, filterFormState);\n    }\n  };\n\n  // generate initial errors\n  runValidation();\n\n  var api = {\n    batch: function batch(fn) {\n      inBatch = true;\n      fn();\n      inBatch = false;\n      notifyFieldListeners();\n      notifyFormListeners();\n    },\n\n    blur: function blur(name) {\n      var fields = state.fields,\n          formState = state.formState;\n\n      var previous = fields[name];\n      if (previous) {\n        // can only blur registered fields\n        delete formState.active;\n        fields[name] = _extends({}, previous, {\n          active: false,\n          touched: true\n        });\n        if (validateOnBlur) {\n          runValidation(name, function () {\n            notifyFieldListeners();\n            notifyFormListeners();\n          });\n        } else {\n          notifyFieldListeners();\n          notifyFormListeners();\n        }\n      }\n    },\n\n    change: function change(name, value) {\n      var fields = state.fields,\n          formState = state.formState;\n\n      if (fields[name] && getIn(formState.values, name) !== value) {\n        changeValue(state, name, function () {\n          return value;\n        });\n        if (validateOnBlur) {\n          notifyFieldListeners();\n          notifyFormListeners();\n        } else {\n          runValidation(name, function () {\n            notifyFieldListeners();\n            notifyFormListeners();\n          });\n        }\n      }\n    },\n\n    focus: function focus(name) {\n      var field = state.fields[name];\n      if (field && !field.active) {\n        state.formState.active = name;\n        field.active = true;\n        field.visited = true;\n        notifyFieldListeners();\n        notifyFormListeners();\n      }\n    },\n\n    mutators: mutatorsApi,\n\n    getRegisteredFields: function getRegisteredFields() {\n      return Object.keys(state.fields);\n    },\n\n    getState: function getState() {\n      return convertToExternalFormState(state.formState);\n    },\n\n    initialize: function initialize(values) {\n      var fields = state.fields,\n          formState = state.formState;\n\n      formState.initialValues = values;\n      formState.values = values;\n      Object.keys(fields).forEach(function (key) {\n        var field = fields[key];\n        field.touched = false;\n        field.visited = false;\n      });\n      runValidation(undefined, function () {\n        notifyFieldListeners();\n        notifyFormListeners();\n      });\n    },\n\n    registerField: function registerField(name, subscriber) {\n      var subscription = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var fieldConfig = arguments[3];\n\n      if (!state.fieldSubscribers[name]) {\n        state.fieldSubscribers[name] = { index: 0, entries: {} };\n      }\n      var index = state.fieldSubscribers[name].index++;\n\n      // save field subscriber callback\n      state.fieldSubscribers[name].entries[index] = {\n        subscriber: memoize(subscriber),\n        subscription: subscription\n      };\n\n      if (!state.fields[name]) {\n        // create initial field state\n        var initial = state.formState.initialValues ? getIn(state.formState.initialValues, name) : undefined;\n        state.fields[name] = {\n          active: false,\n          blur: function blur() {\n            return api.blur(name);\n          },\n          change: function change(value) {\n            return api.change(name, value);\n          },\n          data: {},\n          focus: function focus() {\n            return api.focus(name);\n          },\n          initial: initial,\n          isEqual: fieldConfig && fieldConfig.isEqual || tripleEquals,\n          lastFieldState: undefined,\n          name: name,\n          touched: false,\n          valid: true,\n          validateFields: fieldConfig && fieldConfig.validateFields,\n          validators: {},\n          visited: false\n        };\n      }\n      if (fieldConfig && fieldConfig.getValidator) {\n        state.fields[name].validators[index] = fieldConfig.getValidator;\n      }\n\n      var sentFirstNotification = false;\n      var firstNotification = function firstNotification() {\n        var fieldState = publishFieldState(state.formState, state.fields[name]);\n        notifySubscriber(subscriber, subscription, fieldState, undefined, filterFieldState, true);\n        state.fields[name].lastFieldState = fieldState;\n        sentFirstNotification = true;\n      };\n\n      runValidation(undefined, function () {\n        notifyFormListeners();\n        if (!sentFirstNotification) {\n          firstNotification();\n        }\n        notifyFieldListeners();\n      });\n\n      return function () {\n        delete state.fields[name].validators[index];\n        delete state.fieldSubscribers[name].entries[index];\n        if (!Object.keys(state.fieldSubscribers[name].entries).length) {\n          delete state.fieldSubscribers[name];\n          delete state.fields[name];\n        }\n        runValidation(undefined, function () {\n          notifyFieldListeners();\n          notifyFormListeners();\n        });\n      };\n    },\n\n    reset: function reset() {\n      api.initialize(state.formState.initialValues || {});\n    },\n\n    submit: function submit() {\n      var formState = state.formState,\n          fields = state.fields;\n\n      if (hasSyncErrors()) {\n        // mark all fields as touched\n        Object.keys(fields).forEach(function (key) {\n          fields[key].touched = true;\n        });\n        state.formState.submitFailed = true;\n        notifyFormListeners();\n        notifyFieldListeners();\n        return; // no submit for you!!\n      }\n      var resolvePromise = void 0;\n      var completeCalled = false;\n      var complete = function complete(errors) {\n        formState.submitting = false;\n        if (errors && (Object.keys(errors).length || Object.getOwnPropertySymbols(errors).length)) {\n          formState.submitFailed = true;\n          formState.submitSucceeded = false;\n          formState.submitErrors = errors;\n          formState.submitError = errors[FORM_ERROR];\n        } else {\n          delete formState.submitErrors;\n          delete formState.submitError;\n          formState.submitFailed = false;\n          formState.submitSucceeded = true;\n        }\n        notifyFormListeners();\n        notifyFieldListeners();\n        completeCalled = true;\n        if (resolvePromise) {\n          resolvePromise();\n        }\n      };\n      formState.submitting = true;\n      formState.submitFailed = false;\n      formState.submitSucceeded = false;\n      formState.lastSubmittedValues = _extends({}, formState.values);\n      if (onSubmit.length === 3) {\n        // onSubmit is expecting a callback, first try synchronously\n        onSubmit(formState.values, api, complete);\n        if (!completeCalled) {\n          // must be async, so we should return a Promise\n          notifyFormListeners(); // let everyone know we are submitting\n          return new Promise(function (resolve) {\n            resolvePromise = resolve;\n          });\n        }\n      } else {\n        // onSubmit is either sync or async with a Promise\n        var result = onSubmit(formState.values, api);\n        if (result && isPromise(result)) {\n          // onSubmit is async with a Promise\n          notifyFormListeners(); // let everyone know we are submitting\n          return result.then(complete);\n        } else {\n          // onSubmit is sync\n          complete(result);\n        }\n      }\n    },\n\n    subscribe: function subscribe(subscriber, subscription) {\n      if (!subscriber) {\n        throw new Error('No callback given.');\n      }\n      if (!subscription) {\n        throw new Error('No subscription provided. What values do you want to listen to?');\n      }\n      var memoized = memoize(subscriber);\n      var subscribers = state.subscribers,\n          lastFormState = state.lastFormState;\n\n      var index = subscribers.index++;\n      subscribers.entries[index] = {\n        subscriber: memoized,\n        subscription: subscription\n      };\n      var nextFormState = calculateNextFormState();\n      if (nextFormState !== lastFormState) {\n        state.lastFormState = nextFormState;\n      }\n      notifySubscriber(memoized, subscription, nextFormState, nextFormState, filterFormState, true);\n      return function () {\n        delete subscribers.entries[index];\n      };\n    }\n  };\n  return api;\n};\n\n//\n\n\n\n/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(2)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1\n");

/***/ }),
/* 2 */
/***/ (function(module, exports) {

eval("// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2\n");

/***/ }),
/* 3 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("var slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar toConsumableArray = function (arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n};\n\n//      \n\n\nvar insert = function insert(_ref, state, _ref2) {\n  var _ref3 = slicedToArray(_ref, 3),\n      name = _ref3[0],\n      index = _ref3[1],\n      value = _ref3[2];\n\n  var changeValue = _ref2.changeValue;\n\n  changeValue(state, name, function (array) {\n    var copy = [].concat(toConsumableArray(array || []));\n    copy.splice(index, 0, value);\n    return copy;\n  });\n};\n\n//      \n\n\nvar move = function move(_ref, state, _ref2) {\n  var _ref3 = slicedToArray(_ref, 3),\n      name = _ref3[0],\n      from = _ref3[1],\n      to = _ref3[2];\n\n  var changeValue = _ref2.changeValue;\n\n  changeValue(state, name, function (array) {\n    var copy = [].concat(toConsumableArray(array || []));\n    var value = copy[from];\n    copy.splice(from, 1);\n    copy.splice(to, 0, value);\n    return copy;\n  });\n};\n\n//      \n\n\nvar pop = function pop(_ref, state, _ref2) {\n  var _ref3 = slicedToArray(_ref, 1),\n      name = _ref3[0];\n\n  var changeValue = _ref2.changeValue;\n\n  var result = void 0;\n  changeValue(state, name, function (array) {\n    if (array) {\n      if (!array.length) {\n        return [];\n      }\n      result = array[array.length - 1];\n      return array.slice(0, array.length - 1);\n    }\n  });\n  return result;\n};\n\n//      \n\n\nvar push = function push(_ref, state, _ref2) {\n  var _ref3 = slicedToArray(_ref, 2),\n      name = _ref3[0],\n      value = _ref3[1];\n\n  var changeValue = _ref2.changeValue;\n\n  changeValue(state, name, function (array) {\n    return array ? [].concat(toConsumableArray(array), [value]) : [value];\n  });\n};\n\n//      \n\n\nvar remove = function remove(_ref, state, _ref2) {\n  var _ref3 = slicedToArray(_ref, 2),\n      name = _ref3[0],\n      index = _ref3[1];\n\n  var changeValue = _ref2.changeValue;\n\n  var returnValue = void 0;\n  changeValue(state, name, function (array) {\n    var copy = [].concat(toConsumableArray(array || []));\n    returnValue = copy[index];\n    copy.splice(index, 1);\n    return copy;\n  });\n  return returnValue;\n};\n\n//      \n\n\nvar shift = function shift(_ref, state, _ref2) {\n  var _ref3 = slicedToArray(_ref, 1),\n      name = _ref3[0];\n\n  var changeValue = _ref2.changeValue;\n\n  var result = void 0;\n  changeValue(state, name, function (array) {\n    if (array) {\n      if (!array.length) {\n        return [];\n      }\n      result = array[0];\n      return array.slice(1, array.length);\n    }\n  });\n  return result;\n};\n\n//      \n\n\nvar swap = function swap(_ref, state, _ref2) {\n  var _ref3 = slicedToArray(_ref, 3),\n      name = _ref3[0],\n      indexA = _ref3[1],\n      indexB = _ref3[2];\n\n  var changeValue = _ref2.changeValue;\n\n  changeValue(state, name, function (array) {\n    var copy = [].concat(toConsumableArray(array || []));\n    var a = copy[indexA];\n    copy[indexA] = copy[indexB];\n    copy[indexB] = a;\n    return copy;\n  });\n};\n\n//      \n\n\nvar unshift = function unshift(_ref, state, _ref2) {\n  var _ref3 = slicedToArray(_ref, 2),\n      name = _ref3[0],\n      value = _ref3[1];\n\n  var changeValue = _ref2.changeValue;\n\n  changeValue(state, name, function (array) {\n    return array ? [value].concat(toConsumableArray(array)) : [value];\n  });\n};\n\n//      \n\nvar mutators = {\n  insert: insert,\n  move: move,\n  pop: pop,\n  push: push,\n  remove: remove,\n  shift: shift,\n  swap: swap,\n  unshift: unshift\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (mutators);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///3\n");

/***/ })
/******/ ]);
